import cv2
import numpy as np

img = cv2.imread("ul.jpg")
img = cv2.pyrDown(img)

cv2.imshow('color', img)
cv2.waitKey(0)
cv2.destroyAllWindows()

img = cv2.imread("ul.jpg")

# img = cv2.pyrDown(img)
# img = cv2.pyrDown(img)

kernel = cv2.getStructuringElement(cv2.MORPH_CROSS, (9,9))
img_dilate = cv2.dilate(img, kernel, anchor=(-1,-1), iterations=1) # dilate : 팽창, 흰색을 기준으로 팽창됨/중심점이 -1,-1
img_erode = cv2.erode(img, kernel, anchor=(-1,-1), iterations=1) # erode : 수축
out_img = np.concatenate((img, img_dilate, img_erode), axis=0) # 이미지를 한번에 보기 위해 합침

cv2.imshow('color', out_img)

cv2.waitKey(0)
cv2.destroyAllWindows()

img = cv2.pyrDown(img)
kernel = cv2.getStructuringElement(cv2.MORPH_CROSS, (9,9))
img_out = cv2.morphologyEx(img,cv2.MORPH_OPEN,kernel,iterations=1) #깍고 채운다

cv2.imshow('img_out', img_out)
cv2.waitKey(0)


kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (9,9))
img_out = cv2.morphologyEx(img,cv2.MORPH_OPEN,kernel,iterations=2) #깍고 채운다




오픈(Open) = dilate(erode(원본))
cv2.morphologyEx(원본,cv2.MORPH_OPEN,kernel,iterations=5)
클로즈(Close) = erode(dilate(원본))
cv2.morphologyEx(원본,cv2.MORPH_CLOSE,kernel,iterations=5)


img_pydown = cv2.pyrDown(cv2.pyrDown(img_color))
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
img_open = cv2.morphologyEx(img_pydown,cv2.MORPH_OPEN,kernel,iterations=5)
img_out = np.concatenate((img_pydown,img_open),axis=1)

cv2.imshow('color', img_out)
cv2.waitKey(0)
cv2.destroyAllWindows()

img_color = cv2.imread("ul.jpg")


img_pydown = cv2.pyrDown(cv2.pyrDown(img_color))
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
img_grad = cv2.morphologyEx(img_pydown,cv2.MORPH_GRADIENT,kernel,iterations=5)
img_out = np.concatenate((img_pydown,img_grad),axis=1)


cv2.imshow('color', img_out)
cv2.waitKey(0)
cv2.destroyAllWindows()

img_pydown = cv2.pyrDown(cv2.pyrDown(img_color))
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
img_open = cv2.morphologyEx(img_pydown,cv2.MORPH_OPEN,kernel,iterations=5)
img_out = np.concatenate((img_pydown,img_open),axis=1)



탑햇(TopHat) = 원본 - open(원본)

img_pydown = cv2.pyrDown(cv2.pyrDown(img_color))
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
img_grad = cv2.morphologyEx(img_pydown,cv2.MORPH_TOPHAT,kernel,iterations=2)
img_out = np.concatenate((img_pydown,img_grad),axis=1)

cv2.imshow('color', img_out)
cv2.waitKey(0)
cv2.destroyAllWindows()


img_pydown = cv2.pyrDown(cv2.pyrDown(img_color))
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
img_grad = cv2.morphologyEx(img_pydown,cv2.MORPH_BLACKHAT,kernel,iterations=2)
img_out = np.concatenate((img_pydown,img_grad),axis=1)

cv2.imshow('color', img_out)
cv2.waitKey(0)
cv2.destroyAllWindows()

img = cv2.imread("17.jpg")

cv2.imshow('color', img)
cv2.waitKey(0)
cv2.destroyAllWindows()

원찾기

img_out = img.copy()
img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
img_pydown = cv2.pyrDown(img_gray)

circles = cv2.HoughCircles(img_gray, cv2.HOUGH_GRADIENT, 1 ,100, param1=250, param2 = 10, minRadius= 80, maxRadius = 100) #원을 찾으면 근처 100이내에 원을 찾지마라

for i in circles[0]:
    cv2.circle(img_out, (i[0], i[1]), i[2], (0,0,255),3)

cv2.imshow('color', img_out)
cv2.waitKey(0)
cv2.destroyAllWindows()


img_out = img.copy()
img_pydown = cv2.pyrDown(img_out)
img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
img_pydown = cv2.pyrDown(img_gray)

circles = cv2.HoughCircles(img_gray, cv2.HOUGH_GRADIENT, 1 ,70, param1=180, param2 = 15, minRadius= 30, maxRadius = 55) #원을 찾으면 근처 100이내에 원을 찾지마라

for i in circles[0]:
    cv2.circle(img_out, (i[0], i[1]), i[2], (0,0,255),2)

cv2.imshow('color', img_out)
cv2.waitKey(0)
cv2.destroyAllWindows()


img = cv2.imread("17.jpg")
img_out = img.copy()
img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
ret, img_gray = cv2.threshold(img_gray,180,255,cv2.THRESH_OTSU)


kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3,3))
img_gray = cv2.morphologyEx(img_gray,cv2.MORPH_OPEN,kernel,iterations=2)

circles = cv2.HoughCircles(img_gray, cv2.HOUGH_GRADIENT, 1 ,50, param1=100, param2 = 15, minRadius= 55, maxRadius = 100) #원을 찾으면 근처 100이내에 원을 찾지마라

for i in circles[0]:
    cv2.circle(img_out, (i[0], i[1]), i[2], (0,255,0),2)
    
# for i in circles[0]:
#     cv2.circle(img_gray, (i[0], i[1]), i[2], (0,0,255),1)


cv2.imshow('color', img_out)
cv2.imshow('img_gray', img_gray)
cv2.waitKey(0)
cv2.destroyAllWindows()

img = cv2.imread("15.jpg")

number1 = np.ones_like(img) * 127
number2 = np.ones_like(img) * 2

img_add = cv2.add(img , number1)
img_sub = cv2.subtract(img,number1)
img_mul = cv2.multiply(img, number2) #대비를 더 키움
img_out = img_mul 
img_div = cv2.divide(img, number2) #전체적으로 어두워짐
img_out = img_div 
cv2.imshow('color', img_div)

cv2.waitKey(0)
cv2.destroyAllWindows()

_max = cv2.max(img,number1)
img_out = _max

_min = cv2.min(img,number1)
img_out = _min

_comp = cv2.compare(img,number1,cv2.CMP_GT) #cmp 변경 가능~
img_out = _comp

#abs(절댓값)

_abs = cv2.absdiff(img,number1)
img_out = _abs

cv2.imshow('color', img_out)

cv2.waitKey(0)
cv2.destroyAllWindows()











